<?php

namespace DoctrineProxies\__CG__\Meritocracy\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class LanguageVacancy extends \Meritocracy\Entity\LanguageVacancy implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'vacancy', 'gradeWrite', 'gradeSpeak', 'gradeRead', 'comment', 'languagePlainText', 'systemLanguage', 'createdAt', 'updatedAt', 'rules', 'importId'];
        }

        return ['__isInitialized__', 'id', 'vacancy', 'gradeWrite', 'gradeSpeak', 'gradeRead', 'comment', 'languagePlainText', 'systemLanguage', 'createdAt', 'updatedAt', 'rules', 'importId'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (LanguageVacancy $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getVacancy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVacancy', []);

        return parent::getVacancy();
    }

    /**
     * {@inheritDoc}
     */
    public function setVacancy($vacancy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVacancy', [$vacancy]);

        return parent::setVacancy($vacancy);
    }

    /**
     * {@inheritDoc}
     */
    public function getGradeWrite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGradeWrite', []);

        return parent::getGradeWrite();
    }

    /**
     * {@inheritDoc}
     */
    public function setGradeWrite($gradeWrite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGradeWrite', [$gradeWrite]);

        return parent::setGradeWrite($gradeWrite);
    }

    /**
     * {@inheritDoc}
     */
    public function getGradeSpeak()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGradeSpeak', []);

        return parent::getGradeSpeak();
    }

    /**
     * {@inheritDoc}
     */
    public function setGradeSpeak($gradeSpeak)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGradeSpeak', [$gradeSpeak]);

        return parent::setGradeSpeak($gradeSpeak);
    }

    /**
     * {@inheritDoc}
     */
    public function getGradeRead()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGradeRead', []);

        return parent::getGradeRead();
    }

    /**
     * {@inheritDoc}
     */
    public function setGradeRead($gradeRead)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGradeRead', [$gradeRead]);

        return parent::setGradeRead($gradeRead);
    }

    /**
     * {@inheritDoc}
     */
    public function getSystemLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSystemLanguage', []);

        return parent::getSystemLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function setSystemLanguage($systemLanguage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSystemLanguage', [$systemLanguage]);

        return parent::setSystemLanguage($systemLanguage);
    }

    /**
     * {@inheritDoc}
     */
    public function getComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComment', []);

        return parent::getComment();
    }

    /**
     * {@inheritDoc}
     */
    public function setComment($comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComment', [$comment]);

        return parent::setComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguagePlainText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguagePlainText', []);

        return parent::getLanguagePlainText();
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguagePlainText($languagePlainText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguagePlainText', [$languagePlainText]);

        return parent::setLanguagePlainText($languagePlainText);
    }

    /**
     * {@inheritDoc}
     */
    public function getRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRules', []);

        return parent::getRules();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function generatePermalink($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'generatePermalink', [$text]);

        return parent::generatePermalink($text);
    }

    /**
     * {@inheritDoc}
     */
    public function getImportId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImportId', []);

        return parent::getImportId();
    }

    /**
     * {@inheritDoc}
     */
    public function setImportId($importId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImportId', [$importId]);

        return parent::setImportId($importId);
    }

}
