<?php

namespace DoctrineProxies\__CG__\Meritocracy\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class WorkExperience extends \Meritocracy\Entity\WorkExperience implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'role', 'jobTitle', 'comment', 'isCurrent', 'user', 'company', 'startDate', 'endDate', 'companyPlainText', 'mongoidJobFunction', '' . "\0" . 'Meritocracy\\Entity\\WorkExperience' . "\0" . 'jobFunction', 'createdAt', 'updatedAt', 'rules', 'importId'];
        }

        return ['__isInitialized__', 'id', 'role', 'jobTitle', 'comment', 'isCurrent', 'user', 'company', 'startDate', 'endDate', 'companyPlainText', 'mongoidJobFunction', '' . "\0" . 'Meritocracy\\Entity\\WorkExperience' . "\0" . 'jobFunction', 'createdAt', 'updatedAt', 'rules', 'importId'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (WorkExperience $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenDate', []);

        return parent::getOpenDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpenDate($openDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpenDate', [$openDate]);

        return parent::setOpenDate($openDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getClosedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClosedDate', []);

        return parent::getClosedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setClosedDate($closedDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClosedDate', [$closedDate]);

        return parent::setClosedDate($closedDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getPermalink()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermalink', []);

        return parent::getPermalink();
    }

    /**
     * {@inheritDoc}
     */
    public function setPermalink($permalink)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPermalink', [$permalink]);

        return parent::setPermalink($permalink);
    }

    /**
     * {@inheritDoc}
     */
    public function getMongoidStudyField()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMongoidStudyField', []);

        return parent::getMongoidStudyField();
    }

    /**
     * {@inheritDoc}
     */
    public function setMongoidStudyField($mongoidStudyField)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMongoidStudyField', [$mongoidStudyField]);

        return parent::setMongoidStudyField($mongoidStudyField);
    }

    /**
     * {@inheritDoc}
     */
    public function getMongoidJobFunction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMongoidJobFunction', []);

        return parent::getMongoidJobFunction();
    }

    /**
     * {@inheritDoc}
     */
    public function setMongoidJobFunction($mongoidJobFunction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMongoidJobFunction', [$mongoidJobFunction]);

        return parent::setMongoidJobFunction($mongoidJobFunction);
    }

    /**
     * {@inheritDoc}
     */
    public function getSeniority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeniority', []);

        return parent::getSeniority();
    }

    /**
     * {@inheritDoc}
     */
    public function setSeniority($seniority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSeniority', [$seniority]);

        return parent::setSeniority($seniority);
    }

    /**
     * {@inheritDoc}
     */
    public function getSystemLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSystemLanguage', []);

        return parent::getSystemLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function setSystemLanguage($systemLanguage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSystemLanguage', [$systemLanguage]);

        return parent::setSystemLanguage($systemLanguage);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getJobTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJobTitle', []);

        return parent::getJobTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setJobTitle($jobTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJobTitle', [$jobTitle]);

        return parent::setJobTitle($jobTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getRole()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', []);

        return parent::getRole();
    }

    /**
     * {@inheritDoc}
     */
    public function setRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRole', [$role]);

        return parent::setRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComment', []);

        return parent::getComment();
    }

    /**
     * {@inheritDoc}
     */
    public function setComment($comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComment', [$comment]);

        return parent::setComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompany()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompany', []);

        return parent::getCompany();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompany($company)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompany', [$company]);

        return parent::setCompany($company);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartDate', []);

        return parent::getStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartDate($startDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartDate', [$startDate]);

        return parent::setStartDate($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndDate', []);

        return parent::getEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndDate($endDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndDate', [$endDate]);

        return parent::setEndDate($endDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompanyPlainText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompanyPlainText', []);

        return parent::getCompanyPlainText();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompanyPlainText($companyPlainText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompanyPlainText', [$companyPlainText]);

        return parent::setCompanyPlainText($companyPlainText);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsCurrent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsCurrent', []);

        return parent::getIsCurrent();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsCurrent($isCurrent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsCurrent', [$isCurrent]);

        return parent::setIsCurrent($isCurrent);
    }

    /**
     * {@inheritDoc}
     */
    public function getJobFunction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJobFunction', []);

        return parent::getJobFunction();
    }

    /**
     * {@inheritDoc}
     */
    public function setJobFunction($jobFunction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJobFunction', [$jobFunction]);

        return parent::setJobFunction($jobFunction);
    }

    /**
     * {@inheritDoc}
     */
    public function getRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRules', []);

        return parent::getRules();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function generatePermalink($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'generatePermalink', [$text]);

        return parent::generatePermalink($text);
    }

    /**
     * {@inheritDoc}
     */
    public function getImportId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImportId', []);

        return parent::getImportId();
    }

    /**
     * {@inheritDoc}
     */
    public function setImportId($importId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImportId', [$importId]);

        return parent::setImportId($importId);
    }

}
