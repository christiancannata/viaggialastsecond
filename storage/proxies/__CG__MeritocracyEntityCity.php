<?php

namespace DoctrineProxies\__CG__\Meritocracy\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class City extends \Meritocracy\Entity\City implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'countryCode', 'geoLat', 'geoLng', 'country', 'addresses', 'vacancies', 'createdAt', 'updatedAt', 'rules', 'importId', 'usesTimestampsInIndex', 'isDocument', 'documentScore', 'documentVersion'];
        }

        return ['__isInitialized__', 'id', 'name', 'countryCode', 'geoLat', 'geoLng', 'country', 'addresses', 'vacancies', 'createdAt', 'updatedAt', 'rules', 'importId', 'usesTimestampsInIndex', 'isDocument', 'documentScore', 'documentVersion'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (City $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountryCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountryCode', []);

        return parent::getCountryCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountryCode($countryCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountryCode', [$countryCode]);

        return parent::setCountryCode($countryCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getGeoLat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGeoLat', []);

        return parent::getGeoLat();
    }

    /**
     * {@inheritDoc}
     */
    public function setGeoLat($geoLat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGeoLat', [$geoLat]);

        return parent::setGeoLat($geoLat);
    }

    /**
     * {@inheritDoc}
     */
    public function getGeoLng()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGeoLng', []);

        return parent::getGeoLng();
    }

    /**
     * {@inheritDoc}
     */
    public function setGeoLng($geoLng)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGeoLng', [$geoLng]);

        return parent::setGeoLng($geoLng);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddresses()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddresses', []);

        return parent::getAddresses();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddresses($addresses)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddresses', [$addresses]);

        return parent::setAddresses($addresses);
    }

    /**
     * {@inheritDoc}
     */
    public function getVacancies()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVacancies', []);

        return parent::getVacancies();
    }

    /**
     * {@inheritDoc}
     */
    public function setVacancies($vacancies)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVacancies', [$vacancies]);

        return parent::setVacancies($vacancies);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRules', []);

        return parent::getRules();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function generatePermalink($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'generatePermalink', [$text]);

        return parent::generatePermalink($text);
    }

    /**
     * {@inheritDoc}
     */
    public function getImportId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImportId', []);

        return parent::getImportId();
    }

    /**
     * {@inheritDoc}
     */
    public function setImportId($importId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImportId', [$importId]);

        return parent::setImportId($importId);
    }

    /**
     * {@inheritDoc}
     */
    public function getElasticSearchClient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getElasticSearchClient', []);

        return parent::getElasticSearchClient();
    }

    /**
     * {@inheritDoc}
     */
    public function newCollection(array $models = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newCollection', [$models]);

        return parent::newCollection($models);
    }

    /**
     * {@inheritDoc}
     */
    public function getIndexName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIndexName', []);

        return parent::getIndexName();
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeName', []);

        return parent::getTypeName();
    }

    /**
     * {@inheritDoc}
     */
    public function usesTimestampsInIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'usesTimestampsInIndex', []);

        return parent::usesTimestampsInIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function useTimestampsInIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'useTimestampsInIndex', []);

        return parent::useTimestampsInIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function dontUseTimestampsInIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'dontUseTimestampsInIndex', []);

        return parent::dontUseTimestampsInIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function getMappingProperties()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMappingProperties', []);

        return parent::getMappingProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function setMappingProperties(array $mapping = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMappingProperties', [$mapping]);

        return parent::setMappingProperties($mapping);
    }

    /**
     * {@inheritDoc}
     */
    public function isDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDocument', []);

        return parent::isDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function documentScore()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'documentScore', []);

        return parent::documentScore();
    }

    /**
     * {@inheritDoc}
     */
    public function documentVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'documentVersion', []);

        return parent::documentVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getIndexDocumentData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIndexDocumentData', []);

        return parent::getIndexDocumentData();
    }

    /**
     * {@inheritDoc}
     */
    public function addToIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addToIndex', []);

        return parent::addToIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function removeFromIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFromIndex', []);

        return parent::removeFromIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function updateIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateIndex', []);

        return parent::updateIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function getIndexedDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIndexedDocument', []);

        return parent::getIndexedDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function getBasicEsParams($getIdIfPossible = true, $getSourceIfPossible = false, $getTimestampIfPossible = false, $limit = NULL, $offset = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBasicEsParams', [$getIdIfPossible, $getSourceIfPossible, $getTimestampIfPossible, $limit, $offset]);

        return parent::getBasicEsParams($getIdIfPossible, $getSourceIfPossible, $getTimestampIfPossible, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function newFromHitBuilder($hit = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newFromHitBuilder', [$hit]);

        return parent::newFromHitBuilder($hit);
    }

}
